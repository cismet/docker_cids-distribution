Utilities for running and building the custom distribution (in docker image)
The content of this folder is part of the custom cids-distribution IMAGE!

- _build_autodistribution.master.sh
Master script for bulding AUTO-DISTRIBUTIONS. Requires cidsDistribution/.private/server.pwd, keystore and keystore.pwd to be present during maven build (files deleted after maven build). Processes all pom.xml files in subdirectories of the generator directory cidsDistribution/gen and builds the respective maven projects. Supports MAVEN_BUID_COMMAND and UPDATE_SNAPSHOTS environment variables

- build_autodistribution.sh
Uses _build_autodistribution.master.sh with MAVEN_BUID_COMMAND `clean package` to build the respective maven project

- prepare_autodistribution.sh
Uses _build_autodistribution.master.sh with MAVEN_BUID_COMMAND `dependency:go-offline --fail-never` to download all dependencies of the respective maven project

- _cids_service_ctl.master.sh
Master script for starting, stopping and restarting cids-servers instances. This master script is used by the individual *cs_ctl.sh* scripts (from host-mounted volume) that are located in the /cidsDistribution/server/###-server-name directories

- cs_ctl.template.sh
Template file for individual cs_ctl.sh server control scripts. 

- create_impostor.sh
Creates an "IMPOSTOR.JAR" (needed to naming java processes) for a specific server starter. Requires the variables STARTER_JAR and SERVICE (name of the service and thus name of the IMPOSTOR.JAR) to be set in the respective *cs_ctl.sh* script.

- create_security_jar
Creates the "SECUTIRY.JAR" that contains signed JNLP files of Java Webstart client applications. Requires cidsDsitribution/.private/keystore and cidsDsitribution/.private/keystore.pwd files to be present. Replace either the *security-jar-template.jar* classpath entry in JNLP files generated by AUTO-DISTRIBUTIONS or replaces ${JNLP_BASE}_security.jar in LEGACY DISTRIBUTIONS JNLP created by cids ABF].

- sign.sh
Signs a JAR file with cismet certificate. Checks if the JAR file is already signed with the cismet certificate, removes existing certificates if present and updates JAR Manifests with proper Permissions and Codebase instructions.

- sign_all.sh
Uses sign.sh to sign all JAR files in the provided lib dir (e.g. /cidsDistribution/lib/m2/). Signs only JAR files that have been modified since the last run sign_all.sh to speed up the signing process when building an image based on [cids-distribution-cache](#cids-distribution-cache)).

- update_configuration.sh
Checks runtime.properties and log4j.properties in the host-mounted volume directories and replaces template variables __DB_HOST__, __DOCKER_HOST__, __LOG4J_HOST__, etc. with actual values from environment variables